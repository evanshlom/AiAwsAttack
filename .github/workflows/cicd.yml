name: Deploy to AWS Fargate
on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Login to ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build and Deploy
        run: |
          # Get account ID
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          
          # Create ECR repository if it doesn't exist
          aws ecr create-repository --repository-name marketing-crew || true
          
          # Build and push Docker image
          docker build -t marketing-crew .
          docker tag marketing-crew:latest $ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/marketing-crew:latest
          docker push $ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com/marketing-crew:latest
          
          # Create S3 bucket if it doesn't exist (for future use)
          aws s3 mb s3://aiawsattack-bucket || true
          
          # Create cluster
          aws ecs create-cluster --cluster-name crewai || true
          
          # Create task execution role if it doesn't exist
          aws iam create-role \
            --role-name ecsTaskExecutionRole \
            --assume-role-policy-document '{
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Principal": {"Service": "ecs-tasks.amazonaws.com"},
                "Action": "sts:AssumeRole"
              }]
            }' || true
          
          aws iam attach-role-policy \
            --role-name ecsTaskExecutionRole \
            --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy || true
          
          aws iam attach-role-policy \
            --role-name ecsTaskExecutionRole \
            --policy-arn arn:aws:iam::aws:policy/AmazonBedrockFullAccess || true
          
          # Wait for role to propagate
          sleep 10
          
          # Register task definition
          aws ecs register-task-definition \
            --family content-crew \
            --network-mode awsvpc \
            --requires-compatibilities FARGATE \
            --cpu "512" \
            --memory "1024" \
            --container-definitions '[{
              "name": "crew",
              "image": "'$ACCOUNT_ID'.dkr.ecr.us-east-1.amazonaws.com/marketing-crew:latest",
              "essential": true
            }]' \
            --execution-role-arn arn:aws:iam::$ACCOUNT_ID:role/ecsTaskExecutionRole
          
          # Run as one-off task (like Lambda invoke)
          aws ecs run-task \
            --cluster crewai \
            --task-definition content-crew \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[$(aws ec2 describe-subnets --query 'Subnets[0].SubnetId' --output text)],assignPublicIp=ENABLED}"
          
          echo "Deployed! Check ECS console for task status"